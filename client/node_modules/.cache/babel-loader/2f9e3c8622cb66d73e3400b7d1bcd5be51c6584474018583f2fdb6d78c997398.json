{"ast":null,"code":"var _jsxFileName = \"/Users/gauana/CS Projects/NoteNest/client/src/pages/login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAuth, GoogleAuthProvider, signInWithRedirect, getRedirectResult } from 'firebase/auth';\nimport styles from '../styles/login.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const auth = getAuth();\n  useEffect(() => {\n    // Check the result of the redirect operation after returning to the app\n    getRedirectResult(auth).then(result => {\n      if (result) {\n        navigate('/dashboard');\n        fetch('/user/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: result.user.email\n          })\n        });\n      }\n    }).catch(error => {\n      console.error('Error retrieving the redirect result:', error);\n    });\n  }, [navigate, auth]);\n  const signInWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithRedirect(auth, provider).catch(error => {\n      console.error('Error signing in with Google:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"NoteNest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.button,\n      onClick: signInWithGoogle,\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useNavigate","getAuth","GoogleAuthProvider","signInWithRedirect","getRedirectResult","styles","jsxDEV","_jsxDEV","Login","_s","navigate","auth","then","result","fetch","method","headers","body","JSON","stringify","email","user","catch","error","console","signInWithGoogle","provider","className","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","button","onClick","_c","$RefreshReg$"],"sources":["/Users/gauana/CS Projects/NoteNest/client/src/pages/login.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAuth, GoogleAuthProvider, signInWithRedirect, getRedirectResult } from 'firebase/auth';\nimport styles from '../styles/login.module.css';\n\nconst Login = () => {\n    const navigate = useNavigate();\n    const auth = getAuth();\n\n    useEffect(() => {\n        // Check the result of the redirect operation after returning to the app\n        getRedirectResult(auth)\n            .then((result) => {\n                if (result) {\n                    navigate('/dashboard');\n                    fetch('/user/login', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({\n                            email: result.user.email,\n                        })\n                        \n                    })\n\n                }\n\n            })\n            .catch((error) => {\n                console.error('Error retrieving the redirect result:', error);\n            });\n    }, [navigate, auth]);\n\n    const signInWithGoogle = () => {\n        const provider = new GoogleAuthProvider();\n        signInWithRedirect(auth, provider)\n            .catch((error) => {\n                console.error('Error signing in with Google:', error);\n            });\n    };\n\n    return (\n        <div className={styles.container}>\n            <h1 className={styles.title}>NoteNest</h1>\n            <button className={styles.button} onClick={signInWithGoogle}>\n                Sign in with Google\n            </button>\n        </div>\n    );\n};\n\nexport default Login;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,iBAAiB,QAAQ,eAAe;AAClG,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,IAAI,GAAGV,OAAO,CAAC,CAAC;EAEtBF,SAAS,CAAC,MAAM;IACZ;IACAK,iBAAiB,CAACO,IAAI,CAAC,CAClBC,IAAI,CAAEC,MAAM,IAAK;MACd,IAAIA,MAAM,EAAE;QACRH,QAAQ,CAAC,YAAY,CAAC;QACtBI,KAAK,CAAC,aAAa,EAAE;UACjBC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBC,KAAK,EAAEP,MAAM,CAACQ,IAAI,CAACD;UACvB,CAAC;QAEL,CAAC,CAAC;MAEN;IAEJ,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IACjE,CAAC,CAAC;EACV,CAAC,EAAE,CAACb,QAAQ,EAAEC,IAAI,CAAC,CAAC;EAEpB,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,MAAMC,QAAQ,GAAG,IAAIxB,kBAAkB,CAAC,CAAC;IACzCC,kBAAkB,CAACQ,IAAI,EAAEe,QAAQ,CAAC,CAC7BJ,KAAK,CAAEC,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD,CAAC,CAAC;EACV,CAAC;EAED,oBACIhB,OAAA;IAAKoB,SAAS,EAAEtB,MAAM,CAACuB,SAAU;IAAAC,QAAA,gBAC7BtB,OAAA;MAAIoB,SAAS,EAAEtB,MAAM,CAACyB,KAAM;MAAAD,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1C3B,OAAA;MAAQoB,SAAS,EAAEtB,MAAM,CAAC8B,MAAO;MAACC,OAAO,EAAEX,gBAAiB;MAAAI,QAAA,EAAC;IAE7D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACzB,EAAA,CA7CID,KAAK;EAAA,QACUR,WAAW;AAAA;AAAAqC,EAAA,GAD1B7B,KAAK;AA+CX,eAAeA,KAAK;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}